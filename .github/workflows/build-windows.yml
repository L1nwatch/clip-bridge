name: Build Windows Executables

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r utils/requirements.txt
        pip install pyinstaller
        
    - name: Build Python executables
      run: |
        cd utils
        pyinstaller --onefile --distpath ../dist/python-standalone server.py --name clipbridge-server.exe
        pyinstaller --onefile --distpath ../dist/python-standalone client.py --name clipbridge-client.exe
        
    - name: Create standalone directory if not exists
      run: |
        if (!(Test-Path "dist/python-standalone")) { New-Item -ItemType Directory -Path "dist/python-standalone" }
        
    - name: List built executables
      run: |
        Get-ChildItem -Path "dist/python-standalone/" -Force
        
    - name: Verify Python executables
      run: |
        # Verify that the executables exist and check their properties
        if (Test-Path "dist/python-standalone/clipbridge-server.exe") {
          $serverFile = Get-Item "dist/python-standalone/clipbridge-server.exe"
          $serverSize = [math]::Round($serverFile.Length/1MB, 2)
          Write-Host "✅ clipbridge-server.exe exists (Size: ${serverSize} MB)"
        } else {
          Write-Host "❌ clipbridge-server.exe not found"
          exit 1
        }
        
        if (Test-Path "dist/python-standalone/clipbridge-client.exe") {
          $clientFile = Get-Item "dist/python-standalone/clipbridge-client.exe"
          $clientSize = [math]::Round($clientFile.Length/1MB, 2)
          Write-Host "✅ clipbridge-client.exe exists (Size: ${clientSize} MB)"
        } else {
          Write-Host "❌ clipbridge-client.exe not found"
          exit 1
        }
        
        # Verify these are Windows PE executables (check for MZ header)
        $serverBytes = [System.IO.File]::ReadAllBytes("dist/python-standalone/clipbridge-server.exe")
        $clientBytes = [System.IO.File]::ReadAllBytes("dist/python-standalone/clipbridge-client.exe")
        
        if ($serverBytes[0] -eq 0x4D -and $serverBytes[1] -eq 0x5A) {
          Write-Host "✅ clipbridge-server.exe has valid PE header"
        } else {
          Write-Host "❌ clipbridge-server.exe is not a valid Windows executable"
          exit 1
        }
        
        if ($clientBytes[0] -eq 0x4D -and $clientBytes[1] -eq 0x5A) {
          Write-Host "✅ clipbridge-client.exe has valid PE header"
        } else {
          Write-Host "❌ clipbridge-client.exe is not a valid Windows executable"
          exit 1
        }
        
    - name: Install npm dependencies
      run: npm install
      
    - name: Build React application
      run: npm run build:clean
      
    - name: Debug build directory contents
      run: |
        Write-Host "Contents of build directory:"
        if (Test-Path "build") {
          Get-ChildItem -Path "build" -Recurse -Force | Select-Object FullName, Length
        } else {
          Write-Host "❌ build directory not found"
        }
        
        Write-Host "Checking for main electron file:"
        if (Test-Path "build/electron.js") {
          Write-Host "✅ build/electron.js exists"
        } else {
          Write-Host "❌ build/electron.js not found"
        }
        
        if (Test-Path "build/package.json") {
          Write-Host "✅ build/package.json exists"
          Write-Host "Contents of build/package.json:"
          Get-Content "build/package.json"
        } else {
          Write-Host "❌ build/package.json not found"
        }
      
    - name: Build Electron app for Windows
      run: npx electron-builder --win --x64 --config electron-builder.json --publish=never
      
    - name: List final build outputs
      run: |
        Write-Host "Contents of dist/electron:"
        if (Test-Path "dist/electron") {
          Get-ChildItem -Path "dist/electron" -Force
        } else {
          Write-Host "❌ dist/electron directory not found"
          exit 1
        }
        
    - name: Verify Windows installer
      run: |
        $setupFiles = Get-ChildItem -Path "dist/electron" -Filter "*.exe" -File
        if ($setupFiles.Count -gt 0) {
          foreach ($file in $setupFiles) {
            $size = [math]::Round($file.Length/1MB, 2)
            Write-Host "✅ Found installer: $($file.Name) (Size: ${size} MB)"
          }
        } else {
          Write-Host "❌ No .exe installer found in dist/electron"
          exit 1
        }
        
    - name: Upload Python executables
      uses: actions/upload-artifact@v4
      with:
        name: windows-python-executables
        path: |
          dist/python-standalone/clipbridge-server.exe
          dist/python-standalone/clipbridge-client.exe
        retention-days: 30
        
    - name: Upload Windows installer
      uses: actions/upload-artifact@v4
      with:
        name: windows-installer
        path: |
          dist/electron/*.exe
        retention-days: 90
        
    - name: Create release assets (on main branch)
      if: github.ref == 'refs/heads/main'
      run: |
        # Create a zip file with both the Python executables and the installer
        if (Test-Path "dist/electron") {
          $installerFiles = Get-ChildItem -Path "dist/electron" -Filter "*.exe" -File
          if ($installerFiles.Count -gt 0) {
            # Copy installer to a temp directory for zipping
            New-Item -ItemType Directory -Path "temp-release" -Force
            Copy-Item "dist/python-standalone/clipbridge-server.exe" "temp-release/"
            Copy-Item "dist/python-standalone/clipbridge-client.exe" "temp-release/"
            Copy-Item $installerFiles[0].FullName "temp-release/"
            
            Compress-Archive -Path "temp-release/*" -DestinationPath "windows-complete.zip"
            Remove-Item "temp-release" -Recurse -Force
          }
        }
        
    - name: Upload complete release assets
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: windows-complete-release
        path: windows-complete.zip
        retention-days: 90
