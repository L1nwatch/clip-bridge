name: Build Cross-Platform Executables

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a new release'
        required: false
        default: false
        type: boolean

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r utils/requirements.txt
        pip install pyinstaller
        
    - name: Build Windows executables
      run: |
        mkdir -p dist/python-standalone
        cd utils
        pyinstaller --onefile --distpath ../dist/python-standalone server.py --name clipbridge-server.exe --clean
        pyinstaller --onefile --distpath ../dist/python-standalone client.py --name clipbridge-client.exe --clean
        
    - name: Verify executables
      run: |
        if (Test-Path "dist/python-standalone/clipbridge-server.exe") {
          $size = (Get-Item "dist/python-standalone/clipbridge-server.exe").Length
          Write-Host "✅ clipbridge-server.exe created (Size: $([math]::Round($size/1MB, 2)) MB)"
        } else {
          Write-Host "❌ clipbridge-server.exe not found"; exit 1
        }
        
        if (Test-Path "dist/python-standalone/clipbridge-client.exe") {
          $size = (Get-Item "dist/python-standalone/clipbridge-client.exe").Length
          Write-Host "✅ clipbridge-client.exe created (Size: $([math]::Round($size/1MB, 2)) MB)"
        } else {
          Write-Host "❌ clipbridge-client.exe not found"; exit 1
        }
        
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-x64-executables
        path: |
          dist/python-standalone/clipbridge-server.exe
          dist/python-standalone/clipbridge-client.exe

  build-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r utils/requirements.txt
        pip install pyinstaller
        
    - name: Build macOS executables
      run: |
        mkdir -p dist/python-standalone
        cd utils
        pyinstaller --onefile --distpath ../dist/python-standalone server.py --name clipbridge-server --clean
        pyinstaller --onefile --distpath ../dist/python-standalone client.py --name clipbridge-client --clean
        
    - name: Verify executables
      run: |
        if [ -f "dist/python-standalone/clipbridge-server" ]; then
          size=$(stat -f%z "dist/python-standalone/clipbridge-server")
          echo "✅ clipbridge-server created (Size: $((size / 1024 / 1024)) MB)"
        else
          echo "❌ clipbridge-server not found"; exit 1
        fi
        
        if [ -f "dist/python-standalone/clipbridge-client" ]; then
          size=$(stat -f%z "dist/python-standalone/clipbridge-client")
          echo "✅ clipbridge-client created (Size: $((size / 1024 / 1024)) MB)"
        else
          echo "❌ clipbridge-client not found"; exit 1
        fi
        
    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-executables
        path: |
          dist/python-standalone/clipbridge-server
          dist/python-standalone/clipbridge-client

  create-release:
    if: startsWith(github.ref, 'refs/tags/') || github.event.inputs.create_release == 'true'
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: windows-x64-executables
        path: ./windows-executables
        
    - name: Download macOS artifacts
      uses: actions/download-artifact@v4
      with:
        name: macos-executables
        path: ./macos-executables
        
    - name: Create release packages
      run: |
        # Create Windows package
        cd windows-executables
        zip -r ../clipbridge-windows-x64.zip .
        cd ..
        
        # Create macOS package
        cd macos-executables
        tar -czf ../clipbridge-macos.tar.gz .
        cd ..
        
        # List all files
        ls -la
        
    - name: Generate release tag
      id: tag
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "tag=v$(date +'%Y.%m.%d-%H%M')" >> $GITHUB_OUTPUT
        else
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        name: ClipBridge ${{ steps.tag.outputs.tag }}
        draft: false
        prerelease: false
        files: |
          clipbridge-windows-x64.zip
          clipbridge-macos.tar.gz
        body: |
          # ClipBridge ${{ steps.tag.outputs.tag }}
          
          ## Downloads
          
          ### Windows (x64)
          - **clipbridge-windows-x64.zip** - Contains `clipbridge-server.exe` and `clipbridge-client.exe`
          - These are native Windows x64 executables that don't require Python to be installed
          
          ### macOS
          - **clipbridge-macos.tar.gz** - Contains `clipbridge-server` and `clipbridge-client`
          - These are native macOS executables that don't require Python to be installed
          
          ## Installation
          
          1. Download the appropriate package for your platform
          2. Extract the files to a directory of your choice
          3. Run the executables directly - no additional dependencies required
          
          Built on: $(date +'%Y-%m-%d %H:%M:%S UTC')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
