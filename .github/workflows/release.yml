name: Build Cross-Platform Executables

permissions:
  contents: write
  actions: read

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a new release'
        required: false
        default: false
        type: boolean

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r utils/requirements.txt
        pip install pyinstaller
        
    - name: Build standalone Python executables
      run: |
        mkdir -p dist/python-standalone
        cd utils
        pyinstaller --onefile --distpath ../dist/python-standalone server.py --name clipbridge-server.exe --clean
        pyinstaller --onefile --distpath ../dist/python-standalone client.py --name clipbridge-client.exe --clean
        
    - name: Install Node.js dependencies
      run: npm install
      
    - name: Build React application and Electron Windows installer
      run: |
        # Build React app and copy Electron files
        npm run build:clean
        
        # Build Electron Windows installer (NSIS)
        npx electron-builder --win --x64 --config config/electron-builder.json
        
    - name: Verify all builds
      run: |
        echo "=== Python Executables ==="
        if (Test-Path "dist/python-standalone/clipbridge-server.exe") {
          $size = (Get-Item "dist/python-standalone/clipbridge-server.exe").Length
          Write-Host "✅ clipbridge-server.exe created (Size: $([math]::Round($size/1MB, 2)) MB)"
        } else {
          Write-Host "❌ clipbridge-server.exe not found"; exit 1
        }
        
        if (Test-Path "dist/python-standalone/clipbridge-client.exe") {
          $size = (Get-Item "dist/python-standalone/clipbridge-client.exe").Length
          Write-Host "✅ clipbridge-client.exe created (Size: $([math]::Round($size/1MB, 2)) MB)"
        } else {
          Write-Host "❌ clipbridge-client.exe not found"; exit 1
        }
        
        echo "=== Electron Windows Installer ==="
        if (Test-Path "dist/electron/*.exe") {
          Get-ChildItem "dist/electron/*.exe" | ForEach-Object {
            $size = $_.Length
            Write-Host "✅ $($_.Name) created (Size: $([math]::Round($size/1MB, 2)) MB)"
          }
        } else {
          Write-Host "❌ No Windows installer files found"; exit 1
        }
        
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-x64-executables
        path: |
          dist/python-standalone/clipbridge-server.exe
          dist/python-standalone/clipbridge-client.exe
          dist/electron/*.exe

  build-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r utils/requirements.txt
        pip install pyinstaller
        
    - name: Build standalone Python executables
      run: |
        mkdir -p dist/python-standalone
        cd utils
        pyinstaller --onefile --distpath ../dist/python-standalone server.py --name clipbridge-server --clean
        pyinstaller --onefile --distpath ../dist/python-standalone client.py --name clipbridge-client --clean
        
    - name: Install Node.js dependencies
      run: npm install
      
    - name: Build React application and Electron DMG
      run: |
        # Build React app and copy Electron files
        npm run build:clean
        
        # Build Electron DMG for macOS ARM64
        npx electron-builder --mac --arm64 --config config/electron-builder.json
        
    - name: Verify all builds
      run: |
        echo "=== Python Executables ==="
        if [ -f "dist/python-standalone/clipbridge-server" ]; then
          size=$(stat -f%z "dist/python-standalone/clipbridge-server")
          echo "✅ clipbridge-server created (Size: $((size / 1024 / 1024)) MB)"
        else
          echo "❌ clipbridge-server not found"; exit 1
        fi
        
        if [ -f "dist/python-standalone/clipbridge-client" ]; then
          size=$(stat -f%z "dist/python-standalone/clipbridge-client")
          echo "✅ clipbridge-client created (Size: $((size / 1024 / 1024)) MB)"
        else
          echo "❌ clipbridge-client not found"; exit 1
        fi
        
        echo "=== Electron DMG ==="
        if ls dist/electron/*.dmg 1> /dev/null 2>&1; then
          for dmg in dist/electron/*.dmg; do
            size=$(stat -f%z "$dmg")
            echo "✅ $(basename "$dmg") created (Size: $((size / 1024 / 1024)) MB)"
          done
        else
          echo "❌ No DMG files found"; exit 1
        fi
        
    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-complete
        path: |
          dist/python-standalone/clipbridge-server
          dist/python-standalone/clipbridge-client
          dist/electron/*.dmg

  create-release:
    if: startsWith(github.ref, 'refs/tags/') || github.event.inputs.create_release == 'true'
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: windows-x64-executables
        path: ./windows-executables
        
    - name: Download macOS artifacts
      uses: actions/download-artifact@v4
      with:
        name: macos-complete
        path: ./macos-complete
        
    - name: Create release packages
      run: |
        # Extract version from git tag
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="v$(date +'%Y.%m.%d-%H%M')"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        # Remove 'v' prefix if present for file naming
        VERSION_NUMBER="${VERSION#v}"
        echo "Building release for version: $VERSION (files: $VERSION_NUMBER)"
        
        # Create Windows packages
        cd windows-executables
        
        # Create Python executables ZIP with version
        mkdir python-tools
        # Copy Python executables from the correct path structure
        find . -name "clipbridge-server.exe" -exec cp {} python-tools/ \;
        find . -name "clipbridge-client.exe" -exec cp {} python-tools/ \;
        
        # Verify files were copied and create ZIP with version
        echo "Files in python-tools directory:"
        ls -la python-tools/
        
        if [ -d "python-tools" ] && [ "$(ls -A python-tools)" ]; then
          zip -r ../clipbridge-windows-python-tools-${VERSION_NUMBER}.zip python-tools/
          echo "✅ Created clipbridge-windows-python-tools-${VERSION_NUMBER}.zip"
        else
          echo "❌ No Python executables found for ZIP creation"
          exit 1
        fi
        
        # Copy Windows installer to root (already has version from electron-builder)
        cp electron/*.exe ../ 2>/dev/null || echo "No Windows installer found"
        cd ..
        
        # Copy DMG file to root for release (already has version from electron-builder)
        cd macos-complete
        cp electron/*.dmg ../ 2>/dev/null || echo "No DMG files found"
        cd ..
        
        # Debug: List all available files
        echo "=== Debug: All downloaded files ==="
        find . -name "*.exe" -o -name "*.dmg" -o -name "*.zip" | sort
        
        # List all files for release
        echo "=== Release files ==="
        ls -la *.zip *.dmg *.exe 2>/dev/null || echo "Some files may be missing"
        
        # Verify the ZIP file was created
        if [ -f "clipbridge-windows-python-tools-${VERSION_NUMBER}.zip" ]; then
          echo "✅ clipbridge-windows-python-tools-${VERSION_NUMBER}.zip is ready for release"
          unzip -l clipbridge-windows-python-tools-${VERSION_NUMBER}.zip
        else
          echo "❌ clipbridge-windows-python-tools-${VERSION_NUMBER}.zip was not created"
          exit 1
        fi
        
    - name: Generate release tag
      id: tag
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "tag=v$(date +'%Y.%m.%d-%H%M')" >> $GITHUB_OUTPUT
        else
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
    - name: Generate build date
      id: date
      run: |
        echo "date=$(date +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT
        
    - name: Debug Token Permissions
      run: |
        echo "GitHub Actor: ${{ github.actor }}"
        echo "Repository: ${{ github.repository }}"
        echo "Event: ${{ github.event_name }}"
        echo "Ref: ${{ github.ref }}"
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        name: ClipBridge ${{ steps.tag.outputs.tag }}
        draft: false
        prerelease: false
        generate_release_notes: true
        files: |
          clipbridge-windows-python-tools-*.zip
          *.exe
          *.dmg
        body: |
          # ClipBridge ${{ steps.tag.outputs.tag }} - Enhanced Image Support 🖼️
          
          ## 🎉 What's New in ${{ steps.tag.outputs.tag }}
          
          ### 🖼️ Full Image Clipboard Support
          - **Cross-platform image sharing** - Copy images seamlessly between Windows and macOS
          - **Multiple format support** - PNG, JPEG, BMP, and GIF formats fully supported
          - **Smart fallback system** - Graceful degradation to text-only mode when needed
          - **Metadata preservation** - Image size and format information maintained
          
          ### ✨ Enhanced Features
          - **Improved notifications** - Fixed picture display issues in UI
          - **Better error handling** - Enhanced signal handling and connection management
          - **Backward compatibility** - Works seamlessly with older text-only clients
          - **Automatic format detection** - Smart content type recognition
          
          ## Downloads
          
          ### Windows (x64)
          - **ClipBridge Setup ${{ steps.tag.outputs.tag }}.exe** - Complete Windows application installer with GUI and embedded Python tools
          - **clipbridge-windows-python-tools-${{ steps.tag.outputs.tag }}.zip** - Standalone Python command-line tools (`clipbridge-server.exe` and `clipbridge-client.exe`)
          - Native Windows x64 executables that don't require Python to be installed
          
          ### macOS (Apple Silicon)
          - **ClipBridge-${{ steps.tag.outputs.tag }}-arm64.dmg** - Complete macOS application with GUI and embedded Python tools
          - Native macOS application that doesn't require Python to be installed
          - Includes both GUI interface and embedded server/client functionality
          
          ## Installation
          
          ### Windows
          **Option 1: Full Application (Recommended)**
          1. Download `ClipBridge Setup ${{ steps.tag.outputs.tag }}.exe`
          2. Run the installer and follow the setup wizard
          3. Launch ClipBridge from Start Menu or Desktop shortcut
          
          **Option 2: Standalone Tools**
          1. Download `clipbridge-windows-python-tools-${{ steps.tag.outputs.tag }}.zip`
          2. Extract the files to a directory of your choice
          3. Run the executables directly (`clipbridge-server.exe` or `clipbridge-client.exe`)
          
          ### macOS
          1. Download the `.dmg` file
          2. Open the DMG and drag ClipBridge to Applications folder
          3. **Important**: If you get a "damaged app" error, right-click the app and select "Open", then click "Open" in the dialog
          4. Alternative: Run `sudo xattr -rd com.apple.quarantine /Applications/ClipBridge.app` in Terminal
          5. Launch ClipBridge from Applications - all functionality included
          
          ## 🖼️ Image Features
          
          ### Supported Formats
          - PNG (lossless, transparency support)
          - JPEG (compressed, high compatibility)
          - BMP (Windows bitmap)
          - GIF (static images)
          
          ### Usage
          - Copy any image on one device → Automatically appears on the other
          - Screenshot sharing between devices
          - Design asset collaboration
          - Mixed content workflows (text + images)
          
          ### Performance
          - Recommended: Images under 10MB for optimal speed
          - Automatic size warnings for large images
          - Smart compression and optimization
          
          > **Note**: This app is not code-signed, so macOS may show security warnings. This is normal for open-source apps distributed outside the App Store.
          
          Built on: ${{ steps.date.outputs.date }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Fallback - Create Release with GitHub CLI
      if: failure()
      run: |
        gh release create ${{ steps.tag.outputs.tag }} \
          --title "ClipBridge ${{ steps.tag.outputs.tag }} - Enhanced Image Support" \
          --notes "Cross-platform clipboard synchronization tool with image support - Built on ${{ steps.date.outputs.date }}" \
          clipbridge-windows-x64.zip \
          *.dmg
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
